openapi: 3.1.0
info:
  title: Swagger CTF players - OpenAPI 3.1
  description: This API was made to defint our project's interface contract for the player's part. Tou will find the URLs we will use to make our requests and build our python API.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: players
paths:
  /players:
    get:
      tags:
        - players
      summary: Return all players
      description: This URL will be used to get the list of all players. It doesn't require any parameters and will return an array of 'Player' type objects.
      operationId: listPlayers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Players'
  /players/manage/{id_player}:
    get:
      tags:
        - players
      summary: Return all infos for a specific player id
      description: This URL will be used get all the informations a given player. It needs the ID of that player in the URL and will return a 'Player' type object.
      operationId: PlayerById
      parameters:
        - name: id_player
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '405':
          description: Invalid input
    delete:
      tags:
        - players
      summary: Delete player
      description: This URL is used ... well ... to delete a player. It need the ID of the player in the URL and won't return anything.
      operationId: delPlayer
      parameters:
        - in: path
          name: id_player
          schema:
              type: string
          required: true
          description: string id of player to delete
      responses:
          200:
              description: player has been deleted
    patch:
      tags:
        - players
      summary: Partially Update a player
      description: Use this URL to update some parts of the player's informations. Can be used to add him to a game (just change the 'id_game' field). It need the player's ID in the URL and the informations to patch in the request body and won't return anything (except the success string).
      operationId: patchPlayer
      parameters:
        - name: id_player
          in: path
          description: Player's ID (the one we will update)
          required: true
          schema:
            type: string
      requestBody:
        description: Modifie un utilisateur existant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Players'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - players
      summary: Update all the player's informations
      description: This URL will be used to update every informations of a player. It need the URL of that player in the URL and the new informations on the request body and won't return anything (except the success string)
      operationId: updateUtilisateur
      parameters:
        - name: id_player
          in: path
          description: Player's ID (the one we will update)
          required: true
          schema:
            type: string
      requestBody:
        description: Update a player
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        default:
          description: successful operation
  /players/challenges:
    post:
      tags:
        - players
      summary: Return all players that completed a challenge (optional)
      description: The purpose of this URL is to retrieve every user that completed a challenge. It takes a 'Challenge' type object as a parameter of the post request and returns an array of 'Player' type objects. The result will be processed by our python script to return the correct values.
      requestBody:
        description: Challenge you want to see
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Challenge"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
        '405':
          description: Invalid input
  /players/team/{id_player}:
    get:
      tags:
        - players
      summary: retrieve a player's team
      description: This URL allows us to see which team a player's on. It needs the name of the player in the URL to work.
      operationId: playerTeam
      parameters:
        - name: id_player
          in: path
          description: Player's ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '405':
          description: Bad id given

components:
  schemas:
    Players :
      type: array
      items: 
        $ref: "#/components/schemas/Player"
    Player:
      type: object
      properties:
        id_player:
          type: integer
        id_user:
          type: integer
        list_id_chall_reussi:
          type: array
          items:
            type: string
            example: Fl@g_!
        list_id_chall_try:
          type: array
          items:
            type: string
            example: Fl@g_!
        id_game:
          type: integer
    Challenge:
      type: object
      properties:
        id_challenge:
          type: string
          example: 01
        chall_name:
          type: string
          example: this is an example
        description:
          type: string
          example: this is a description on my example
        nb_point:
          type: integer
          example: 450000
        creator:
          type: string
          example: this is my example's creator
        solution:
          type: string
          example: Fl@g_!
    Challenges:
      type: array
      items:
        $ref: "#/components/schemas/Challenges"