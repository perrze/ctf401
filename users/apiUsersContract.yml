openapi: 3.1.0
info:
  title: ctf401 - API USERS
  description: |-
    This API allow to manage users database for ctf401 project. It allows users to connect (jwt) and disconnect. Admins to delete or add users
  contact:
    email: contact@perrze.fr
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
externalDocs:
  description: Find out more about ctf401
  url: https://github.com/perrze/ctf401
servers:
  - url: https://ctf401.bb0.fr
tags:
  - name: users
    description: Operations about users
paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      description: ''
      operationId: listUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Invalid username/password supplied

  /users/create:
    post:
      tags:
        - users
      summary: Create user
      description: Can only be used by an admin
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    get:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
            format: password
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jwt'
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
  /users/{userid}:
    get:
      tags:
        - users 
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: userid
          in: path
          description: 'The Id to be fetched '
          required: true
          schema:
            type: string
            example: '9e9fd408-0bc4-4c41-a3c0-c4e6a0e033d5'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userid
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
            example: '9e9fd408-0bc4-4c41-a3c0-c4e6a0e033d5'
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    patch:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updatePatchUser
      parameters:
        - name: userid
          in: path
          description: id to be updated
          required: true
          schema:
            type: string
            example: '9e9fd408-0bc4-4c41-a3c0-c4e6a0e033d5'
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /users/{userid}/roles:
    get:
      tags:
        - users
      summary: Get roles by user id
      description: ''
      operationId: getUserRoleById
      parameters:
        - name: userid
          in: path
          description: 'The Id to be fetched '
          required: true
          schema:
            type: string
            example: '9e9fd408-0bc4-4c41-a3c0-c4e6a0e033d5'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref : '#/components/schemas/Roles'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

components:
  schemas:
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id_user:
          type: string
          format: uuid
          example: '9e9fd408-0bc4-4c41-a3c0-c4e6a0e033d5'
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
        username:
          type: string
          example: 'jdoe'
        password:
          type: string
          format: password
          example: '2986b7f0cd0ba9827ace0810c8818825'
        roles:
          type: array
          items: 
            $ref : '#/components/schemas/Roles'
        description:
          type: string
          example: 'I am John Doe'
    Jwt:
      type: object
      properties:
        token:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    Roles:
          type: array
          items:
            type: string
          example: ['admin','player']
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
